@startuml
!theme metal
!include  https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!define GCPPuml https://raw.githubusercontent.com/davidholsgrove/gcp-icons-for-plantuml/master/dist

!includeurl GCPPuml/GCPCommon.puml
!includeurl GCPPuml/Compute/all.puml
!includeurl GCPPuml/DataAnalytics/CloudPubSub.puml
!includeurl GCPPuml/Databases/CloudFirestore.puml
!includeurl GCPPuml/DeveloperTools/CloudScheduler.puml
!includeurl GCPPuml/ManagementTools/Trace.puml


!include DEVICONS/react_original.puml
!include DEVICONS/nestjs.puml
!include DEVICONS/firebase.puml

!include FONTAWESOME/users.puml


AddRelTag("async", $lineStyle = DashedLine())

Person(users, "Moradores", "Moradores dos condomínios", $sprite="users")
Person(admins, "Administradores", "Administradores dos condomínios", $sprite="users")


Container(web, "Aplicação web", "Next.js", "Sistema de interface gráfica para usuários dos navegadores", $sprite="react_original")
Container(mobile, "Aplicação Mobile", "React Native", "Sistema de interface gráfica para usuários mobile", $sprite="react_original")

Rel(admins, web, "Gerenciam o condomínio por")
Rel(users, mobile, "Utilizam")


System_Boundary(registry_module, "Módulo de registro - Produção") {
   Container(registry_api, "API de registro", "Nest.js", "API responsável por registrar a autenticar contas de usuários e condomínios", $sprite="nestjs")

   ContainerDb(registry_db, "Repositório de usuários e condomínios", "CockroachDB", "Banco de dados que armazena informações de registro do condomínio e dos usuários")
   ContainerDb(key_db, "Repositório de chaves", "Firestore", "Banco de dados que armazena as chaves usadas em processo de segurança", $sprite="CloudFirestore,scale=0.35")

   Container(refresh_key_manager, "Função de atualização de valores de chaves", "Cloud function", "Função dedicada a atualizar os valores das chaves no registro de chaves", $sprite="CloudFunctions,scale=0.35")
   Container(trace, "Analisador de traces", "Cloud Trace", "Serviço do GCP responsável por analisar os traces gerados pelo módulo")
   Container(error_reporting, "Alerta de erro", "Error Reporting", "Serviço do GCP responsável por enviar notificações de errors")
   Container(update_key_scheduler, "Scheduler de atualização de chave", "Cloud Scheduler", "Scheduler dedicado a atualizar as chaves do repositório", $sprite="CloudScheduler,scale=0.35")
   
   ContainerQueue(delete_member_topic, "Cloud pub/sub", "Tópico: delete member", "Remoção de membros do condomínio", $sprite="CloudPubSub,scale=0.35")
   ContainerQueue(delete_condominium_topic, "Cloud pub/sub", "Tópico: delete condominium", "Remoção do condomínio", $sprite="CloudPubSub,scale=0.35")
   ContainerQueue(delete_user_topic, "Cloud pub/sub", "Tópico: delete user", "Remoção do usuário", $sprite="CloudPubSub,scale=0.35")

   Rel(web, registry_api, "Registra ou autentica os usuários por", "HTTP/JSON")
   Rel(mobile, registry_api, "Registra ou autentica os usuários por", "HTTP/JSON")

   Rel(registry_api, registry_db, "Armazena os registros do condomínio e usuários em", "SSL")
   Rel(key_db, registry_api, "Informa em tempo real os valores das chaves", "GRPC", , $tags = "async")
   Rel(refresh_key_manager, key_db, "Atualiza os valores das chaves no registro de chaves e assinatures", "GRPC")
   Rel(update_key_scheduler, refresh_key_manager, "Atualiza as chaves periodicamente por", "HTTP/JSON", $tags = "async"))
   
   Rel(registry_api, trace, "Armazena os traces em", "HTTP")
   Rel(refresh_key_manager, trace, "Armazena os traces em", "HTTP")
   
   Rel(registry_api, error_reporting, "Reporta os erros em", "HTTP")
   Rel(refresh_key_manager, error_reporting, "Reporta os erros em", "HTTP")

   Rel(registry_api, delete_member_topic, "Evento informativo de deleção de membros do registro do condomínio", "JSON", $tags = "async")
   Rel(registry_api, delete_condominium_topic, "Evento informativo de deleção do condomínio", "JSON", $tags = "async")
   Rel(registry_api, delete_user_topic, "Evento informativo de deleção do usuário", "JSON", $tags = "async")
}

@enduml
